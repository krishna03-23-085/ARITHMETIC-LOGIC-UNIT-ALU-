// -----------------------------------------------------------------------------
// MODULE: alu_8bit
// DESCRIPTION: 8-bit Arithmetic Logic Unit with 5 core functions.
// -----------------------------------------------------------------------------
module alu_8bit (
    input [7:0] A, B,
    input [2:0] OpSel,
    output reg [7:0] Result,
    output reg Cout,
    output Zero
);

    // Internal wire for ADD/SUB to capture the full 9-bit result 
    // to correctly extract the carry-out (Cout).
    wire [8:0] temp_sum;
    
    // Implement Subtraction using 2's complement: A - B = A + (~B + 1)
    assign temp_sum = (OpSel == 3'b000) ? ({1'b0, A} + {1'b0, B}) : 
                      (OpSel == 3'b001) ? ({1'b0, A} + {1'b0, (~B + 1'b1)}) : 9'b0;

    // Combinational block for all operations
    always @(*) begin
        // Default assignments to prevent latch inference
        Result = 8'b0; 
        Cout = 1'b0;

        case(OpSel)
            // 000: ADD
            3'b000: begin
                // The most significant bit of temp_sum is the Cout
                {Cout, Result} = temp_sum;
            end
            
            // 001: SUBTRACT
            3'b001: begin
                // For subtraction, the Cout is the borrow-out (inverted)
                // Cout=1 indicates no borrow was needed, which is correct for simple subtraction.
                {Cout, Result} = temp_sum;
            end
            
            // 010: AND
            3'b010: begin
                Result = A & B;
            end
            
            // 011: OR
            3'b011: begin
                Result = A | B;
            end
            
            // 100: NOT (only uses A, B is ignored)
            3'b100: begin
                Result = ~A;
            end
            
            // Default case for undefined OpSel values
            default: begin
                Result = 8'hXX; // Assign unknown
                Cout = 1'bX;
            end
        endcase
    end

    // Logic for the Zero Flag
    // Zero is 1 if Result is equal to 0, otherwise 0.
    assign Zero = (Result == 8'h00) ? 1'b1 : 1'b0;

endmodule
